package com.pauwma.glyphbeat.animation.styles

import kotlin.math.sqrt

/**
 * Dancing Duck theme extending ThemeTemplate with comprehensive features.
 * Features a cute dancing duck animation with individual frame durations.
 * Now extends ThemeTemplate for enhanced features including state-specific frames.
 */
class DancingDuckTheme : ThemeTemplate() {
    
    // =================================================================================
    // THEME METADATA - Dancing duck theme information
    // =================================================================================
    
    override val titleTheme: String = "Dancing Duck"
    override val descriptionTheme: String = "He knows exactly what he's doing."
    override val authorName: String = "pauwma"
    override val version: String = "1.0.0" 
    override val category: String = "Fun"
    override val tags: Array<String> = arrayOf("duck", "dancing", "cute", "animated", "fun", "character")
    override val createdDate: Long = 1640995200000L // January 1, 2022
    
    // =================================================================================
    // ANIMATION PROPERTIES
    // =================================================================================
    
    override val animationSpeedValue: Long = 150L // Moderate speed for duck dancing
    override val brightnessValue: Int = 255
    override val loopMode: String = "normal"
    override val complexity: String = "Medium"
    
    // Individual frame durations for dancing rhythm (2 frames)
    override val frameDurations: LongArray? = null
    
    // =================================================================================
    // BEHAVIOR SETTINGS
    // =================================================================================
    
    override val isReactive: Boolean = false
    override val supportsFadeTransitions: Boolean = true
    
    // =================================================================================
    // TECHNICAL METADATA
    // =================================================================================
    
    override val compatibilityVersion: String = "1.0.0"
    override val frameDataFormat: String = "shaped" // Uses circular matrix layout

    // =================================================================================
    // ANIMATION FRAMES - 2 frames of dancing duck
    // =================================================================================

    override val frames = arrayOf(
        // Frame 1 (F0) - Duck dancing pos 1
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,255,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,0,0,255,0),

        // Frame 2 (F1) - Duck dancing pos 2
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,255,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,0,0,255,0),

        // Frame 3 (F2) - Head move to front
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,0,0,255,0),

        // Frame 4 (F3) - Head move down
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,0,0,255,0)
    )

    override val frameTransitions: List<FrameTransition>? = listOf(
        FrameTransition(0, 1, 10, 120L), // F1→F2 repeated 10 times at 120ms (duck dancing)
        FrameTransition(0, 2, 10, 150L),  // F1→F3 repeated 10 times at 120ms (different dance)
        FrameTransition(0, 1, 10, 120L), // F1→F2 repeated 10 times at 120ms (duck dancing)
        FrameTransition(1, 3, 10, 120L)  // F1→F3 repeated 10 times at 120ms (different dance)
    )


    // =================================================================================
    // STATE-SPECIFIC FRAMES - Using appropriate frames for different states
    // =================================================================================
    
    override val pausedFrame: IntArray = intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,125,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,255,255,125,0,0,255,0,0,0,0,0,0,0,0,0,0,200,200,0,0,0,255,0,0,255,255,255,125,0,0,255,0,0,0,0,0,0,0,0,0,200,0,0,200,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,255,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,200,200,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,200,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,200,0,0,0,0,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,0,0,255,0) // Use first frame as paused state
    override val offlineFrame: IntArray = intArrayOf(0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,129,255,255,255,138,0,1,0,0,0,0,0,0,0,0,255,177,0,0,0,166,255,0,1,0,0,0,0,0,0,0,0,255,44,0,17,0,0,0,30,255,0,0,0,0,0,0,0,0,0,0,255,30,0,225,117,0,0,0,0,2,255,0,0,0,0,0,0,0,0,0,118,202,0,144,146,0,0,1,0,0,0,174,142,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0,0,0,0,1,0,0,255,0,0,0,0,0,0,0,0,0,97,205,0,189,89,0,0,0,0,0,1,222,0,189,112,0,0,0,0,0,0,0,0,0,233,36,1,255,0,0,0,0,0,0,0,0,0,18,252,1,0,1,0,0,0,0,0,0,0,255,0,1,168,0,0,0,0,1,0,0,0,0,0,255,0,0,0,0,0,0,1,0,0,1,255,0,0,0,0,0,1,1,0,0,0,72,207,0,255,0,0,0,0,0,0,0,1,1,0,223,1,0,1,0,0,0,0,0,0,0,0,16,0,208,0,1,1,0,0,0,0,0,0,0,202,0,0,0,0,0,0,0,0,0,0,0,0,0,182,0,0,0,0,0,0,0,0,0,17,229,0,0,0,0,0,0,0,1,0,0,0,0,0,209,0,0,0,0,0,1,0,0,0,0,255,1,0,0,0,0,0,0,0,1,1,0,0,0,252,0,1,0,0,0,0,0,1,0,255,0,0,0,0,0,1,0,89,0,0,0,0,0,255,0,0,1,0,0,1,1,0,169,93,1,226,0,1,1,0,90,0,1,124,12,74,178,0,0,0,0,0,0,0,0,255,0,0,0,0,0,62,46,0,1,0,0,255,0,0,0,0,0,0,0,0,69,255,0,0,255,0,0,0,0,0,0,255,84,0,0,0,0,0,0,0,0,61,255,170,0,1,0,0,1,162,255,68,0,0,1,0,1,1,0,0,0,138,255,255,254,255,255,145,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0) // Empty frame when offline
    override val loadingFrame: IntArray by lazy { frames[0].clone() } // Use first frame for loading
    override val errorFrame: IntArray = IntArray(625) { 0 } // Empty frame for errors
    
    // Validation is handled by parent ThemeTemplate class
    
    // =================================================================================
    // OVERRIDDEN METHODS - Convert shaped data to flat array format
    // =================================================================================
    
    override fun getFrameCount(): Int = framesCount

    override fun generateFrame(frameIndex: Int): IntArray {
        validateFrameIndex(frameIndex)
        
        // Convert shaped grid data to flat 25x25 array with circular masking
        val shapedData = frames[frameIndex]
        val flatArray = createEmptyFrame()
        
        // The shaped data represents the circular matrix layout
        // We need to map it to the proper positions in a 25x25 grid
        var shapedIndex = 0
        
        for (row in 0 until 25) {
            for (col in 0 until 25) {
                val flatIndex = row * 25 + col
                
                // Check if this pixel is within the circular matrix shape
                val centerX = 12.0
                val centerY = 12.0
                val distance = sqrt((col - centerX) * (col - centerX) + (row - centerY) * (row - centerY))
                
                if (distance <= 12.5) { // Within the circular shape
                    if (shapedIndex < shapedData.size) {
                        flatArray[flatIndex] = shapedData[shapedIndex]
                        shapedIndex++
                    }
                }
            }
        }
        
        return flatArray
    }

    override fun getThemeName(): String = titleTheme
    override fun getAnimationSpeed(): Long = animationSpeedValue
    override fun getBrightness(): Int = brightnessValue
    override fun getDescription(): String = descriptionTheme
    
    // All theme metadata and utility methods are inherited from ThemeTemplate parent class
    // No need to redefine them here - they automatically use the private properties defined above
}