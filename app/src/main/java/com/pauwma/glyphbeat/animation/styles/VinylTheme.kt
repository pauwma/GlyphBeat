package com.pauwma.glyphbeat.animation.styles

/**
 * Custom vinyl record theme with predefined 8-frame animation.
 * Uses specific pixel data to create a detailed vinyl record spinning animation.
 * Now extends ThemeTemplate for enhanced features.
 */
class VinylTheme() : ThemeTemplate() {
    
    // =================================================================================
    // THEME METADATA - Custom vinyl record theme information
    // =================================================================================
    
    override val titleTheme: String = "Vinyl Record"
    override val descriptionTheme: String = "Go full retro.\nGo full DJ mode!"
    override val authorName: String = "pauwma"
    override val version: String = "1.0.0" 
    override val category: String = "Music"
    override val tags: Array<String> = arrayOf("vinyl", "record", "turntable", "classic", "spinning", "music")
    override val createdDate: Long = 1640995200000L // January 1, 2022
    
    // =================================================================================
    // ANIMATION PROPERTIES
    // =================================================================================
    
    override val animationSpeedValue: Long = 100L // Fast spinning like a real record
    override val brightnessValue: Int = 255
    override val loopMode: String = "normal"
    override val complexity: String = "Medium"
    
    // Use equal frame durations based on animationSpeedValue
    override val frameDurations: LongArray? = null
    
    // =================================================================================
    // BEHAVIOR SETTINGS
    // =================================================================================
    
    override val isReactive: Boolean = false
    override val supportsFadeTransitions: Boolean = true
    
    // =================================================================================
    // TECHNICAL METADATA
    // =================================================================================
    
    override val compatibilityVersion: String = "1.0.0"
    override val frameDataFormat: String = "shaped" // Uses circular matrix layout
    
    // =================================================================================
    // ANIMATION FRAMES - 8 frames of vinyl record spinning
    // =================================================================================
    
    override val frames = arrayOf(
        // Frame 1
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,255,0,205,0,0,0,165,0,0,0,0,255,255,205,0,0,0,0,165,0,0,0,205,0,255,255,0,255,0,0,205,0,0,0,0,255,255,255,205,205,0,0,0,0,205,0,0,255,0,255,255,0,255,0,0,255,0,0,0,0,255,255,0,255,255,0,0,0,0,255,0,0,255,0,255,255,0,255,0,0,205,0,0,0,0,205,205,255,255,255,0,0,0,0,205,0,0,255,0,255,255,0,205,0,0,0,165,0,0,0,0,205,255,255,0,0,0,0,165,0,0,0,205,0,255,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 2
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,165,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,0,0,0,0,0,255,255,255,205,205,0,0,0,0,0,0,0,165,0,255,255,0,165,0,0,0,0,0,0,0,205,255,0,255,205,0,0,0,0,0,0,0,165,0,255,255,0,165,0,0,0,0,0,0,0,205,205,255,255,255,0,0,0,0,0,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,165,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 3
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,255,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,255,255,255,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,255,0,255,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,255,255,255,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 4
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,205,205,165,165,0,0,0,0,255,255,255,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,0,255,255,0,165,0,0,165,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,205,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,255,0,255,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,205,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,165,0,0,165,0,255,255,0,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,255,255,255,0,0,0,0,165,165,205,205,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 5
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,205,255,255,255,205,0,0,0,255,255,255,0,0,0,165,205,0,0,0,0,0,205,165,0,0,0,255,255,0,0,0,165,0,0,0,0,0,0,0,0,0,165,0,0,0,255,255,0,0,0,0,0,0,0,0,205,255,205,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,165,0,0,0,165,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,205,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,205,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,205,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,205,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,165,0,0,0,165,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,205,255,205,0,0,0,0,0,0,0,0,255,255,0,0,0,165,0,0,0,0,0,0,0,0,0,165,0,0,0,255,255,0,0,0,165,205,0,0,0,0,0,205,165,0,0,0,255,255,255,0,0,0,205,255,255,255,205,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 6
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,165,165,205,205,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,165,0,0,165,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,205,205,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,205,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,205,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,205,205,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,165,0,0,165,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,205,205,165,165,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 7
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,205,205,205,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,205,205,205,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,255,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 8
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,205,205,0,0,0,0,0,165,0,0,205,0,255,255,0,165,0,0,0,0,0,0,0,255,255,255,205,255,0,0,0,0,0,0,0,205,0,255,255,0,165,0,0,0,0,0,0,0,255,255,0,255,255,0,0,0,0,0,0,0,165,0,255,255,0,205,0,0,0,0,0,0,0,255,205,255,255,255,0,0,0,0,0,0,0,165,0,255,255,0,205,0,0,165,0,0,0,0,0,205,205,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255)
    )
    
    // framesCount and previewFrame are automatically calculated from frames array via lazy initialization
    
    // =================================================================================
    // STATE-SPECIFIC FRAMES - Using appropriate frames for different states
    // =================================================================================
    
    override val pausedFrame: IntArray = IntArray(0) // No custom paused frame - use smooth pause
    override val offlineFrame: IntArray = IntArray(625) { 0 } // Empty frame when offline
    override val loadingFrame: IntArray by lazy { frames[0].clone() } // Use first frame for loading
    override val errorFrame: IntArray = IntArray(625) { 0 } // Empty frame for errors
    
    // Validation is handled by parent ThemeTemplate class
    
    // =================================================================================
    // OVERRIDDEN METHODS - Convert shaped data to flat array format
    // =================================================================================
    
    override fun getFrameCount(): Int = framesCount
    
    override fun generateFrame(frameIndex: Int): IntArray {
        validateFrameIndex(frameIndex)
        
        // Convert shaped grid data to flat 25x25 array
        val shapedData = frames[frameIndex]
        val flatArray = createEmptyFrame()
        
        // The shaped data represents the circular matrix layout
        // We need to map it to the proper positions in a 25x25 grid
        var shapedIndex = 0
        
        for (row in 0 until 25) {
            for (col in 0 until 25) {
                val flatIndex = row * 25 + col
                
                // Check if this pixel is within the circular matrix shape
                val centerX = 12.0
                val centerY = 12.0
                val distance = kotlin.math.sqrt((col - centerX) * (col - centerX) + (row - centerY) * (row - centerY))
                
                if (distance <= 12.5 && shapedIndex < shapedData.size) {
                    flatArray[flatIndex] = shapedData[shapedIndex]
                    shapedIndex++
                }
            }
        }
        
        return flatArray
    }
    
    override fun getThemeName(): String = titleTheme
    override fun getAnimationSpeed(): Long = animationSpeedValue
    override fun getBrightness(): Int = brightnessValue
    override fun getDescription(): String = descriptionTheme
    
    // All theme metadata and utility methods are inherited from ThemeTemplate parent class
    // No need to redefine them here - they automatically use the private properties defined above
}