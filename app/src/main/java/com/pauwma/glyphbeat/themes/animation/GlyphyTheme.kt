package com.pauwma.glyphbeat.themes.animation

import com.pauwma.glyphbeat.themes.base.FrameTransition
import com.pauwma.glyphbeat.themes.base.ThemeTemplate
import com.pauwma.glyphbeat.ui.settings.SettingCategories
import com.pauwma.glyphbeat.ui.settings.ThemeSettings
import com.pauwma.glyphbeat.ui.settings.ThemeSettingsBuilder
import com.pauwma.glyphbeat.ui.settings.ThemeSettingsProvider
import com.pauwma.glyphbeat.ui.settings.getDropdownValue
import kotlin.math.sqrt

class GlyphyTheme  : ThemeTemplate(), ThemeSettingsProvider {
    
    // No animation state needed for static pause frame

    // =================================================================================
    // THEME METADATA
    // =================================================================================
    override val titleTheme: String = "Glyphy (WIP)"
    override val descriptionTheme: String = "Training to be a good AI, but for now look at him..."
    override val authorName: String = "pauwma"
    override val version: String = "1.0.0"
    override val category: String = "Fun"
    override val tags: Array<String> = arrayOf("ai", "dancing", "cute", "animated", "fun", "character")


    // =================================================================================
    // ANIMATION PROPERTIES
    // =================================================================================

    override val animationSpeedValue: Long = 50L
    override val brightnessValue: Int = 255
    override val loopMode: String = "normal"
    override val complexity: String = "Medium"
    
    // Set to null since we're using frameTransitions for timing control
    override val frameDurations: LongArray? = null


    // =================================================================================
    // BEHAVIOR SETTINGS
    // =================================================================================

    override val isReactive: Boolean = false
    override val supportsFadeTransitions: Boolean = true


    // =================================================================================
    // TECHNICAL METADATA
    // =================================================================================

    override val compatibilityVersion: String = "1.0.0"
    override val frameDataFormat: String = "shaped" // Uses circular matrix layout

    // =================================================================================
    // ANIMATION FRAMES
    // =================================================================================

    private var currentAnimationPattern: String = "dance" // Default should have transitions
    private var currentPausedFrameIndex: Int = -1 // Store the selected paused frame index
    private var shouldSelectNewPausedFrame: Boolean = true // Track when to select a new random frame
    private var hasShownPausedFrame: Boolean = false // Track if we've shown a paused frame in this pause cycle

    private val sleepPausedFrame = intArrayOf(
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,125,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,255,255,125,0,0,255,0,0,0,0,0,0,0,0,0,0,200,200,0,0,0,255,0,0,255,255,255,125,0,0,255,0,0,0,0,0,0,0,0,0,200,0,0,200,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,255,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,200,200,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,200,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,200,0,0,0,0,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,0,0,255,0
    )

    private val madPausedFrame = intArrayOf(
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    )

    private val hmmPausedFrame = intArrayOf(
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    )

    private val cryPausedFrame = intArrayOf(
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,0,0,0,0,0,0,0,0,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,0,0,0,0,0,0,0,0,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,0,0,0,0,0,0,0,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,0,0,0,0,0,0,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,0,0,0,0,0,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,0,0,0,0,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,0,0,0,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,0,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,0,0,100,75,50,0,0,0,0,0,0,0,50,75,100,0,75,50,0,0,0,0,0,0,0,50,75,0,0,0,0,0,0,0
    )

    private val huhPausedFrame = intArrayOf(
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    )


    private val baseOfflineFrame = intArrayOf(
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,53,53,0,40,40,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,40,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    )

    // Randomly select between different paused frame expressions
    override val pausedFrame: IntArray
        get() {
            // List of all available paused frames
            val pausedFrameOptions = listOf(
                sleepPausedFrame,
                madPausedFrame,
                hmmPausedFrame,
                cryPausedFrame,
                huhPausedFrame
            )
            
            // Select a new random frame when:
            // 1. First time (index is -1)
            // 2. Flag is set (from settings change)
            // 3. This is a fresh pause (hasn't shown paused frame yet in this cycle)
            if (shouldSelectNewPausedFrame || currentPausedFrameIndex == -1 || 
                currentPausedFrameIndex >= pausedFrameOptions.size || !hasShownPausedFrame) {
                currentPausedFrameIndex = pausedFrameOptions.indices.random()
                shouldSelectNewPausedFrame = false
                hasShownPausedFrame = true // Mark that we've shown a paused frame
            }
            
            // Use the stored selection
            val selectedFrame = pausedFrameOptions[currentPausedFrameIndex]
            
            // Convert to flat format and return
            return convertShapedToFlat(selectedFrame)
        }
    
    // Method to trigger selection of a new random paused frame
    fun selectNewPausedFrame() {
        shouldSelectNewPausedFrame = true
        hasShownPausedFrame = false // Reset so next access will select new frame
    }

    override val offlineFrame: IntArray
        get() = convertShapedToFlat(baseOfflineFrame)
    
    // Use Frame 3 (Eyes Full) as the static preview frame when not selected
    override val previewFrame: IntArray
        get() = frames[3].clone()  // Frame 3 - Eyes Full (open eyes)
    
    // Specify which frame index to use for static preview
    val previewFrameIndex: Int = 3  // Frame 3 - Eyes Full
    override val frames = arrayOf(


        // Frame 1 (F0) - Opening Stage 1
        intArrayOf(
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ),

        // Frame 2 (F1) - Opening Stage 2
        intArrayOf(
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ),

        // Frame 3 (F2) - - Opening Stage 3
        intArrayOf(
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ),

        // Frame 4 (F3) - Eyes Full
        intArrayOf(

        ),

        // ---------------------
        // DANCING FRAMES F3 - F4 - F5 - F6 - F7 - F6 - F5 - F4 - F3 - F8 - F9 - F10 - F11 - F10 - F9 - F8 - F3
        // ---------------------

        // (F4) - Left 1
        intArrayOf(

        ),
        // (F5) - Left 2
        intArrayOf(

        ),
        // (F6) - Left 3
        intArrayOf(

        ),
        // (F7) - Left 4
        intArrayOf(

        ),
        // (F8) - Right 1
        intArrayOf(

        ),
        // (F9) - Right 2
        intArrayOf(

        ),
        // (F10) - Right 3
        intArrayOf(

        ),
        // (F11) - Right 4
        intArrayOf(

        ),

        // ---------------------
        // JAMMING FRAMES
        // ---------------------

        // (F12) - Jam 1
        intArrayOf(
            120,120,120,120,120,120,120,0,0,0,0,0,0,0,0,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,120,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,120,120,150,120,120,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,120,150,150,150,120,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,120,150,150,150,120,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,120,120,150,120,120,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,120,120,120,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ),
        // (F13) - Jam 2
        intArrayOf(
            0,0,0,0,0,0,0,120,120,120,120,120,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,150,150,120,120,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,120,150,150,150,120,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,120,150,150,150,120,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,120,150,150,120,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,120,120,120,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ),
        // (F14) - Jam 3
        intArrayOf(
            0,0,0,0,0,0,0,120,120,120,120,120,120,120,0,0,0,0,120,120,0,0,0,0,0,120,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,150,150,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,150,150,150,120,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,120,150,150,150,120,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,120,150,150,120,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,120,120,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        )
    )

    /**
     * Helper function to generate transitions from a sequence of frame indices
     * Each consecutive pair in the sequence becomes a transition
     */
    private fun generateTransitionsFromSequence(
        sequence: IntArray, 
        duration: Long,
        repetitions: Int = 1
    ): List<FrameTransition> {
        val transitions = mutableListOf<FrameTransition>()
        for (i in 0 until sequence.size - 1) {
            transitions.add(
                FrameTransition(
                    fromFrameIndex = sequence[i],
                    toFrameIndex = sequence[i + 1],
                    repetitions = repetitions,
                    transitionDuration = duration
                )
            )
        }
        return transitions
    }

    // Opening eyes animation - plays once at startup
    override val openingTransitions: List<FrameTransition>? 
        get() {
            // Reset the pause flag when resuming
            // This ensures next pause will get a new random frame
            hasShownPausedFrame = false
            return listOf(
                FrameTransition(0, 1, 1, 50L),  // F0→F1: Start opening
                FrameTransition(1, 2, 1, 50L),  // F1→F2: Opening more
                FrameTransition(2, 3, 1, 50L),  // F2→F3: Fully open
                FrameTransition(3, 3, 2, 200L), // F3→F3: Hold open before dance
            )
        }
    
    // Dancing sequence - loops continuously after opening
    // Uses F3 (eyes open) as the resting position
    private val dancingSequence = intArrayOf(
        3,  // F3: Eyes open (start position)
        4,  // F4: Left 1
        5,  // F5: Left 2
        6,  // F6: Left 3
        7,  // F7: Left 4 (leftmost)
        6,  // F6: Back to Left 3
        5,  // F5: Back to Left 2
        4,  // F4: Back to Left 1
        3,  // F3: Center (eyes open)
        8,  // F8: Right 1
        9,  // F9: Right 2
        10, // F10: Right 3
        11, // F11: Right 4 (rightmost)
        10, // F10: Back to Right 3
        9,  // F9: Back to Right 2
        8,  // F8: Back to Right 1
        3   // F3: Back to center (eyes open)
    )

    private val jammingSequence = intArrayOf(
        12, 13, 14, 13, 12  // Added 12 at the end to complete the loop
    )
    
    // Blinking sequence - simple eye blinking animation
    private val blinkingSequence = listOf(
        FrameTransition(3, 3, 1, 2000L),  // F3: Eyes open (hold for 2 seconds)
        FrameTransition(3, 2, 1, 50L),    // F3→F2: Start closing
        FrameTransition(2, 1, 1, 50L),    // F2→F1: Closing more
        FrameTransition(1, 0, 1, 50L),    // F1→F0: Fully closed
        FrameTransition(0, 0, 1, 150L),   // F0: Hold closed briefly
        FrameTransition(0, 1, 1, 50L),    // F0→F1: Start opening
        FrameTransition(1, 2, 1, 50L),    // F1→F2: Opening more
        FrameTransition(2, 3, 1, 50L),    // F2→F3: Fully open
    )

    // Main looping animation - switches based on selected pattern
    override val frameTransitions: List<FrameTransition>?
        get() = when (currentAnimationPattern) {
            "dance" -> generateTransitionsFromSequence(dancingSequence, duration = 50L)
            "jam" -> generateTransitionsFromSequence(jammingSequence, duration = 120L)
            "blink" -> blinkingSequence
            else -> generateTransitionsFromSequence(dancingSequence, duration = 50L) // Default to dance
        }

    override fun generateFrame(frameIndex: Int): IntArray {
        validateFrameIndex(frameIndex)

        // Convert shaped grid data to flat 25x25 array with circular masking
        val shapedData = frames[frameIndex]
        return convertShapedToFlat(shapedData)
    }

    private fun convertShapedToFlat(shapedData: IntArray): IntArray {
        val flatArray = createEmptyFrame()

        // The shaped data represents the circular matrix layout
        // We need to map it to the proper positions in a 25x25 grid
        var shapedIndex = 0

        for (row in 0 until 25) {
            for (col in 0 until 25) {
                val flatIndex = row * 25 + col

                // Check if this pixel is within the circular matrix shape
                val centerX = 12.0
                val centerY = 12.0
                val distance = sqrt((col - centerX) * (col - centerX) + (row - centerY) * (row - centerY))

                if (distance <= 12.5) { // Within the circular shape
                    if (shapedIndex < shapedData.size) {
                        // Apply brightness directly to pixel values using the unified model
                        val basePixelValue = shapedData[shapedIndex]
                        flatArray[flatIndex] = basePixelValue
                        shapedIndex++
                    }
                }
            }
        }

        return flatArray
    }

    override fun getSettingsSchema(): ThemeSettings {
        return ThemeSettingsBuilder(getSettingsId())
            .addDropdownSetting(
                id = "animation_pattern",
                displayName = "Animation Pattern",
                description = "Style of the animation",
                defaultValue = "dance",
                optionsMap = mapOf(
                    "dance" to "Dance",
                    "blink" to "Blink",
                    "jam" to "Jamming"
                ),
                category = SettingCategories.ANIMATION
            )
            .build()
    }

    override fun applySettings(settings: ThemeSettings) {
        // Store previous pattern to detect changes
        val previousPattern = currentAnimationPattern

        // Apply animation pattern
        currentAnimationPattern = settings.getDropdownValue("animation_pattern", "dance")
        
        // Reset pause state when settings change
        hasShownPausedFrame = false
        shouldSelectNewPausedFrame = true
    }
}