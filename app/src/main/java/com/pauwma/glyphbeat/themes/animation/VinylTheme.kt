package com.pauwma.glyphbeat.themes.animation

import android.content.Context
import com.pauwma.glyphbeat.R
import com.pauwma.glyphbeat.themes.base.ThemeTemplate
import com.pauwma.glyphbeat.ui.settings.*

/**
 * Custom vinyl record theme with predefined 8-frame animation.
 * Uses specific pixel data to create a detailed vinyl record spinning animation.
 * Now extends ThemeTemplate for enhanced features and supports customizable settings.
 */
class VinylTheme(private val ctx: Context) : ThemeTemplate(), ThemeSettingsProvider {
    
    // Settings-driven properties with default values
    private var currentAnimationSpeed: Long = getAnimationSpeed()
    private var currentBrightness: Int = 255
    private var currentVinylSize: String = "large"
    
    // =================================================================================
    // THEME METADATA - Custom vinyl record theme information
    // =================================================================================
    
    override val titleTheme: String = ctx.getString(R.string.theme_vinyl_record_title)
    override val descriptionTheme: String = ctx.getString(R.string.theme_vinyl_record_desc)
    override val authorName: String = "pauwma"
    override val version: String = "1.0.0" 
    override val category: String = "Music"
    override val tags: Array<String> = arrayOf("vinyl", "record", "turntable", "classic", "spinning", "music")
    override val createdDate: Long = 1640995200000L // January 1, 2022
    
    // =================================================================================
    // ANIMATION PROPERTIES
    // =================================================================================
    
    override val animationSpeedValue: Long = 100L // Fast spinning like a real record
    override val brightnessValue: Int = 255
    override val loopMode: String = "normal"
    override val complexity: String = "Medium"
    
    // Use equal frame durations based on animationSpeedValue
    override val frameDurations: LongArray? = null
    
    // =================================================================================
    // BEHAVIOR SETTINGS
    // =================================================================================
    
    override val isReactive: Boolean = false
    override val supportsFadeTransitions: Boolean = true
    
    // =================================================================================
    // TECHNICAL METADATA
    // =================================================================================
    
    override val compatibilityVersion: String = "1.0.0"
    override val frameDataFormat: String = "shaped" // Uses circular matrix layout
    
    // =================================================================================
    // ANIMATION FRAMES - 8 frames of vinyl record spinning
    // =================================================================================
    
    override val frames = arrayOf(
        // Frame 1
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,255,0,205,0,0,0,165,0,0,0,0,255,255,205,0,0,0,0,165,0,0,0,205,0,255,255,0,255,0,0,205,0,0,0,0,255,255,255,205,205,0,0,0,0,205,0,0,255,0,255,255,0,255,0,0,255,0,0,0,0,255,255,0,255,255,0,0,0,0,255,0,0,255,0,255,255,0,255,0,0,205,0,0,0,0,205,205,255,255,255,0,0,0,0,205,0,0,255,0,255,255,0,205,0,0,0,165,0,0,0,0,205,255,255,0,0,0,0,165,0,0,0,205,0,255,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 2
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,165,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,0,0,0,0,0,255,255,255,205,205,0,0,0,0,0,0,0,165,0,255,255,0,165,0,0,0,0,0,0,0,205,255,0,255,205,0,0,0,0,0,0,0,165,0,255,255,0,165,0,0,0,0,0,0,0,205,205,255,255,255,0,0,0,0,0,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,165,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 3
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,255,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,255,255,255,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,255,0,255,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,255,255,255,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 4
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,205,205,165,165,0,0,0,0,255,255,255,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,0,255,255,0,165,0,0,165,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,205,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,255,0,255,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,205,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,165,0,0,165,0,255,255,0,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,255,255,255,0,0,0,0,165,165,205,205,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 5
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,205,255,255,255,205,0,0,0,255,255,255,0,0,0,165,205,0,0,0,0,0,205,165,0,0,0,255,255,0,0,0,165,0,0,0,0,0,0,0,0,0,165,0,0,0,255,255,0,0,0,0,0,0,0,0,205,255,205,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,165,0,0,0,165,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,205,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,205,205,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,205,205,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,205,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,165,0,0,0,165,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,205,255,205,0,0,0,0,0,0,0,0,255,255,0,0,0,165,0,0,0,0,0,0,0,0,0,165,0,0,0,255,255,0,0,0,165,205,0,0,0,0,0,205,165,0,0,0,255,255,255,0,0,0,205,255,255,255,205,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 6
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,165,165,205,205,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,165,0,0,165,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,205,205,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,205,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,205,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,205,205,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,165,0,0,165,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,205,205,165,165,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 7
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,165,205,0,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,205,205,205,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,205,205,205,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,255,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,205,165,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255),

        // Frame 8
        intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,205,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,205,205,0,0,0,0,0,165,0,0,205,0,255,255,0,165,0,0,0,0,0,0,0,255,255,255,205,255,0,0,0,0,0,0,0,205,0,255,255,0,165,0,0,0,0,0,0,0,255,255,0,255,255,0,0,0,0,0,0,0,165,0,255,255,0,205,0,0,0,0,0,0,0,255,205,255,255,255,0,0,0,0,0,0,0,165,0,255,255,0,205,0,0,165,0,0,0,0,0,205,205,255,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,205,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255)
    )
    
    // =================================================================================
    // SMALL SIZE FRAMES - 8 hardcoded frames for small vinyl size
    // =================================================================================
    
    private val smallFrames = arrayOf(
        // Small Frame 1
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,255,0,0,0,0,0,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,255,0,0,0,0,255,0,205,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,205,0,255,0,0,0,0,255,0,205,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,205,0,255,0,0,0,0,255,0,205,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,205,0,255,0,0,0,0,255,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,255,0,0,0,0,0,255,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),

        // Small Frame 2
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,165,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,165,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,165,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,165,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),

        // Small Frame 3
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,255,0,0,0,165,165,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,205,205,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,205,205,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,165,165,0,0,0,255,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),

        // Small Frame 4
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,165,165,0,0,0,0,255,255,0,0,0,0,0,0,255,0,0,0,205,205,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,165,205,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,205,165,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,205,205,0,0,0,255,0,0,0,0,0,0,255,255,0,0,0,0,165,165,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),

        // Small Frame 5
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,205,205,205,0,0,0,255,255,0,0,0,0,0,0,255,0,0,0,165,165,0,0,0,165,165,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,165,165,0,0,0,165,165,0,0,0,255,0,0,0,0,0,0,255,255,0,0,0,205,205,205,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),

        // Small Frame 6
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,165,165,0,0,0,255,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,205,205,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,205,165,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,165,205,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,205,205,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,255,0,0,0,165,165,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),

        // Small Frame 7
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,165,165,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,205,205,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,205,205,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,165,165,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),

        // Small Frame 8
        intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,165,0,255,0,0,0,0,255,0,165,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,165,0,255,0,0,0,0,255,0,165,0,0,0,0,0,0,100,255,100,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    )
    
    // framesCount and previewFrame are automatically calculated from frames array via lazy initialization
    
    // =================================================================================
    // STATE-SPECIFIC FRAMES - Using appropriate frames for different states with brightness support
    // =================================================================================

    // Base frames for state-specific displays (without brightness applied)
    private val basePausedFrame = frames[0] // Use first frame as paused state
    private val baseOfflineFrame = intArrayOf(255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,120,255,0,0,0,205,165,0,0,0,0,0,0,0,0,0,120,0,255,0,0,255,205,0,0,0,0,0,0,0,0,0,0,120,0,120,255,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,120,0,120,0,255,255,0,255,0,0,0,205,165,0,0,0,0,0,0,120,120,0,120,0,0,255,255,0,0,205,0,0,255,0,0,0,0,0,0,0,120,0,0,120,0,0,0,0,255,255,0,205,0,0,205,0,0,0,0,0,0,0,120,0,120,120,0,0,0,0,0,255,255,0,0,165,0,0,165,0,0,0,0,200,200,120,0,120,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,200,200,120,0,120,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,200,120,0,120,200,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,200,120,0,120,200,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,120,0,120,200,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,120,0,120,200,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,120,0,120,0,0,0,0,0,0,165,0,0,165,0,0,255,255,0,0,0,0,0,0,120,0,120,0,0,0,0,0,0,0,205,0,0,205,0,255,255,0,0,0,0,0,0,120,0,120,0,0,0,0,0,0,255,0,0,205,0,0,255,255,0,0,0,0,0,120,0,120,0,0,0,0,165,205,0,0,0,255,0,255,255,0,0,0,0,0,120,0,120,0,0,0,0,0,0,0,0,255,0,0,255,255,0,0,0,120,0,120,0,0,0,0,0,0,0,205,255,0,0,255,255,0,120,0,120,0,0,0,0,0,0,165,205,0,0,0,255,120,0,120,0,0,0,0,0,0,0,0,0,0,255,255,120,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255)

    private val smallOfflineFrame = intArrayOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,255,0,0,0,165,165,0,0,0,0,0,0,0,120,0,0,0,0,0,0,255,0,0,205,205,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,255,0,205,0,0,0,0,0,0,0,0,0,120,120,0,120,255,0,0,0,0,0,255,0,0,205,0,0,0,0,0,0,0,0,120,0,0,120,0,0,255,0,0,0,0,0,255,0,165,0,0,0,0,0,0,0,0,120,0,120,120,0,0,0,255,0,0,0,0,0,255,0,0,165,0,0,0,0,0,0,205,120,0,120,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,205,205,100,0,120,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,205,120,0,120,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,120,120,100,0,100,205,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,120,120,0,0,0,120,205,0,0,0,0,0,165,0,0,255,0,0,0,0,0,255,0,0,120,0,0,120,120,120,0,0,0,0,0,0,0,165,0,255,0,0,0,0,0,0,120,120,0,120,120,0,0,0,0,0,0,0,0,0,205,0,0,255,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,205,0,255,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,205,205,0,0,255,0,0,0,0,0,255,0,0,0,0,0,0,0,0,165,165,0,0,0,255,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)

    // Empty pausedFrame for smooth stop functionality (freezes at current animation frame)
    override val pausedFrame: IntArray = IntArray(0)
    
    override val offlineFrame: IntArray
        get() = applyBrightnessToFrame(
            if (currentVinylSize == "small") smallOfflineFrame else baseOfflineFrame
        )
    
    override val loadingFrame: IntArray
        get() = generateFrame(0)
    
    override val errorFrame: IntArray = IntArray(625) { 0 } // Error frame stays black
    
    /**
     * Apply current brightness setting to any frame array
     */
    private fun applyBrightnessToFrame(baseFrame: IntArray): IntArray {
        // Check if this is a shaped array (489 elements) or flat array (625 elements)
        return if (baseFrame.size == 489) {
            // Convert shaped to flat and apply brightness
            val flatArray = convertShapedToFlat(baseFrame)
            flatArray.map { pixelValue ->
                com.pauwma.glyphbeat.core.GlyphMatrixBrightnessModel.calculateFinalBrightness(
                    pixelValue,
                    currentBrightness
                )
            }.toIntArray()
        } else {
            // Already flat, apply brightness to each pixel
            baseFrame.map { pixelValue ->
                com.pauwma.glyphbeat.core.GlyphMatrixBrightnessModel.calculateFinalBrightness(
                    pixelValue,
                    currentBrightness
                )
            }.toIntArray()
        }
    }
    
    /**
     * Converts shaped frame data (489 elements) to flat array format (625 elements)
     */
    private fun convertShapedToFlat(shapedData: IntArray): IntArray {
        val flatArray = createEmptyFrame()
        var shapedIndex = 0
        
        for (row in 0 until 25) {
            for (col in 0 until 25) {
                val flatIndex = row * 25 + col
                
                // Check if this pixel is within the circular matrix shape
                val centerX = 12.0
                val centerY = 12.0
                val distance = kotlin.math.sqrt((col - centerX) * (col - centerX) + (row - centerY) * (row - centerY))
                
                if (distance <= 12.5 && shapedIndex < shapedData.size) {
                    // Just copy the pixel value without applying brightness
                    // Brightness will be applied consistently in generateFrame
                    flatArray[flatIndex] = shapedData[shapedIndex]
                    shapedIndex++
                }
            }
        }
        
        return flatArray
    }
    
    // Validation is handled by parent ThemeTemplate class
    
    // =================================================================================
    // OVERRIDDEN METHODS - Convert shaped data to flat array format
    // =================================================================================
    
    override fun getFrameCount(): Int = framesCount
    
    override fun getThemeName(): String = titleTheme
    override fun getAnimationSpeed(): Long = currentAnimationSpeed
    override fun getBrightness(): Int = currentBrightness
    override fun getDescription(): String = descriptionTheme
    
    // =================================================================================
    // THEME SETTINGS PROVIDER IMPLEMENTATION
    // =================================================================================
    
    override fun getSettingsSchema(): ThemeSettings {
        return ThemeSettingsBuilder(getSettingsId())
            .addSliderSetting(
                id = CommonSettingIds.ROTATION_SPEED,
                displayName = "Rotation Speed",
                description = "How fast the vinyl record spins",
                defaultValue = 100L,
                minValue = 50L,
                maxValue = 300L,
                stepSize = 10L,
                unit = "ms",
                category = SettingCategories.ANIMATION
            )
            .addDropdownSetting(
                id = "vinyl_size",
                displayName = "Vinyl Size",
                description = "Size of the vinyl record display",
                defaultValue = "large",
                optionsMap = mapOf(
                    "small" to "Small",
                    "large" to "Large"
                ),
                category = SettingCategories.VISUAL
            )
            .addSliderSetting(
                id = CommonSettingIds.BRIGHTNESS,
                displayName = "Brightness",
                description = "Overall brightness of the vinyl",
                defaultValue = 1.0f,
                minValue = 0.1f,
                maxValue = 1.0f,
                stepSize = 0.1f,
                unit = null,
                category = SettingCategories.VISUAL
            )
            .build()
    }
    
    override fun applySettings(settings: ThemeSettings) {
        // Apply rotation speed
        currentAnimationSpeed = settings.getSliderValueLong(CommonSettingIds.ROTATION_SPEED, 100L)
        
        // Apply brightness with validation (convert multiplier to 0-255 range)
        val brightnessMultiplier = settings.getSliderValueFloat(CommonSettingIds.BRIGHTNESS, 1.0f)
        currentBrightness = (brightnessMultiplier * 255).toInt().coerceIn(0, 255)
        
        // Apply vinyl size
        currentVinylSize = settings.getDropdownValue("vinyl_size", "large")
    }
    
    override fun generateFrame(frameIndex: Int): IntArray {
        validateFrameIndex(frameIndex)
        
        // For Large size, use the original shaped data conversion
        if (currentVinylSize != "small") {
            // Convert shaped grid data to flat 25x25 array
            val shapedData = frames[frameIndex]
            val flatArray = createEmptyFrame()
            
            // The shaped data represents the circular matrix layout
            // We need to map it to the proper positions in a 25x25 grid
            var shapedIndex = 0
            
            for (row in 0 until 25) {
                for (col in 0 until 25) {
                    val flatIndex = row * 25 + col
                    
                    // Check if this pixel is within the circular matrix shape
                    val centerX = 12.0
                    val centerY = 12.0
                    val distance = kotlin.math.sqrt((col - centerX) * (col - centerX) + (row - centerY) * (row - centerY))
                    
                    if (distance <= 12.5 && shapedIndex < shapedData.size) {
                        // Apply brightness directly to pixel values using the unified model
                        val basePixelValue = shapedData[shapedIndex]
                        flatArray[flatIndex] = com.pauwma.glyphbeat.core.GlyphMatrixBrightnessModel.calculateFinalBrightness(
                            basePixelValue, 
                            currentBrightness
                        )
                        shapedIndex++
                    }
                }
            }
            
            return flatArray
        } else {
            // For Small size, convert shaped array to flat array with brightness
            val shapedData = smallFrames[frameIndex]
            val flatArray = createEmptyFrame()
            var shapedIndex = 0
            
            for (row in 0 until 25) {
                for (col in 0 until 25) {
                    val flatIndex = row * 25 + col
                    
                    // Check if this pixel is within the circular matrix shape
                    val centerX = 12.0
                    val centerY = 12.0
                    val distance = kotlin.math.sqrt((col - centerX) * (col - centerX) + (row - centerY) * (row - centerY))
                    
                    if (distance <= 12.5 && shapedIndex < shapedData.size) {
                        // Apply brightness directly to pixel values using the unified model
                        val basePixelValue = shapedData[shapedIndex]
                        flatArray[flatIndex] = com.pauwma.glyphbeat.core.GlyphMatrixBrightnessModel.calculateFinalBrightness(
                            basePixelValue,
                            currentBrightness
                        )
                        shapedIndex++
                    }
                }
            }
            
            return flatArray
        }
    }
    
    // All theme metadata and utility methods are inherited from ThemeTemplate parent class
    // No need to redefine them here - they automatically use the private properties defined above
}